name: Deploy to Production Server

on:
  push:
    branches:
      - main

# 환경 변수 설정
env:
  DOCKER_REGISTRY: ${{ secrets.NCP_CONTAINER_REGISTRY }}
  APP_IMAGE_NAME: languagemate-server
  APP_IMAGE_VERSION: ${{ github.sha }}
  
  # Docker Compose에서 사용할 컨테이너 및 서비스 이름
  APP_CONTAINER_NAME: languagemate-app
  DB_CONTAINER_NAME: languagemate-db
  DB_SERVICE_NAME: languagemate-db
  DB_DATABASE: languagemate_db
  REDIS_CONTAINER_NAME: languagemate-redis
  REDIS_SERVICE_NAME: languagemate-redis
  TIME_ZONE: Asia/Seoul

jobs:
  # -----------------------------------
  # 1. 빌드 및 Docker 이미지 푸시
  # -----------------------------------
  build-and-push:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: gradle

      - name: Grant execute permission for gradlew
        run: chmod +x ./gradlew

      - name: Build with Gradle
        run: ./gradlew build -x test

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to NCP Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.DOCKER_REGISTRY }}
          username: ${{ secrets.NCP_ACCESS_KEY }}
          password: ${{ secrets.NCP_SECRET_KEY }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: |
            ${{ env.DOCKER_REGISTRY }}/${{ env.APP_IMAGE_NAME }}:${{ env.APP_IMAGE_VERSION }}
            ${{ env.DOCKER_REGISTRY }}/${{ env.APP_IMAGE_NAME }}:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # -----------------------------------
  # 2. 서버에 배포
  # -----------------------------------
  deploy:
    name: Deploy to Server
    needs: build-and-push
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Configure SSH
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.NCP_SERVER_PEM_KEY }}

      - name: Create .env file for Docker Compose
        run: |
          echo "DOCKER_REGISTRY=${{ env.DOCKER_REGISTRY }}" >> .env
          echo "APP_IMAGE_NAME=${{ env.APP_IMAGE_NAME }}" >> .env
          echo "APP_IMAGE_VERSION=${{ env.APP_IMAGE_VERSION }}" >> .env
          echo "APP_CONTAINER_NAME=${{ env.APP_CONTAINER_NAME }}" >> .env
          echo "DB_CONTAINER_NAME=${{ env.DB_CONTAINER_NAME }}" >> .env
          echo "DB_SERVICE_NAME=${{ env.DB_SERVICE_NAME }}" >> .env
          echo "DB_DATABASE=${{ env.DB_DATABASE }}" >> .env
          echo "REDIS_CONTAINER_NAME=${{ env.REDIS_CONTAINER_NAME }}" >> .env
          echo "REDIS_SERVICE_NAME=${{ env.REDIS_SERVICE_NAME }}" >> .env
          echo "TIME_ZONE=${{ env.TIME_ZONE }}" >> .env
          
          # Secrets
          echo "DB_ROOT_PASSWORD=${{ secrets.DB_ROOT_PASSWORD }}" >> .env
          echo "DB_USER=${{ secrets.DB_USER }}" >> .env
          echo "DB_PASSWORD=${{ secrets.DB_PASSWORD }}" >> .env
          echo "REDIS_PASSWORD=${{ secrets.REDIS_PASSWORD }}" >> .env
          echo "JWT_SECRET_KEY=${{ secrets.JWT_SECRET_KEY }}" >> .env
          echo "NAVER_CLIENT_ID=${{ secrets.NAVER_CLIENT_ID }}" >> .env
          echo "NAVER_CLIENT_SECRET=${{ secrets.NAVER_CLIENT_SECRET }}" >> .env

      - name: Copy files to server
        run: |
          scp -o StrictHostKeyChecking=no -r ./docker-compose.yml ./.env ${{ secrets.NCP_SERVER_USER }}@${{ secrets.NCP_SERVER_HOST }}:/home/ubuntu/languagemate

      - name: Deploy on server
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.NCP_SERVER_HOST }}
          username: ${{ secrets.NCP_SERVER_USER }}
          key: ${{ secrets.NCP_SERVER_PEM_KEY }}
          script: |
            cd /home/ubuntu/languagemate
            
            # NCP Container Registry 로그인
            echo "${{ secrets.NCP_SECRET_KEY }}" | docker login ${{ env.DOCKER_REGISTRY }} -u "${{ secrets.NCP_ACCESS_KEY }}" --password-stdin
            
            # 최신 이미지 pull 및 컨테이너 재시작
            docker-compose pull
            docker-compose up -d --remove-orphans
            
            # 불필요한 Docker 이미지 정리
            docker image prune -af

  # -----------------------------------
  # 3. 배포 결과 알림
  # -----------------------------------
  notify:
    name: Notify Deployment Status
    needs: deploy
    runs-on: ubuntu-latest
    if: always() # 항상 실행
    steps:
      - name: Send Discord Notification
        uses: sarisia/actions-status-discord@v1
        with:
          webhook: ${{ secrets.DISCORD_WEBHOOK_URL }}
          status: ${{ job.status }}
          title: "${{ github.repository }} 배포 결과"
          description: "`main` 브랜치에 대한 배포가 **${{ job.status == 'success' && '성공' || '실패' }}**했습니다."
          color: "${{ job.status == 'success' ? '28a745' : 'dc3545' }}"
          username: "GitHub Actions"
          avatar_url: "https://github.githubassets.com/images/modules/logos_page/GitHub-Mark.png"
