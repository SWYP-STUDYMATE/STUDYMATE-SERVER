name: Deploy to NCP

on:
  push:
    branches:
      - main
  workflow_dispatch:

env:
  IMAGE_NAME: studymate-server

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'
      
      - name: Create application.ymlㄴ
        run: |
          mkdir -p src/main/resources
          echo "${{ secrets.APPLICATION_YML }}" > src/main/resources/application.yml
      
      - name: Debug - print key config (redacted)
        run: |
          echo "===== application.yml (redacted) ====="
          sed -E \
            -e 's/(password:).*/\1 *******/' \
            -e 's/(client_secret:).*/\1 *******/' \
            -e 's/(secret_key:).*/\1 *******/' \
            -e 's/(access-key:).*/\1 *******/' \
            -e 's/(secret-key:).*/\1 *******/' \
            src/main/resources/application.yml | sed -n '1,200p'
          echo "===== end ====="

      - name: Debug - validate application.yml and compute checksum
        run: |
          echo "application.yml size:" $(wc -c < src/main/resources/application.yml) "bytes"
          echo "application.yml sha256:" $(shasum -a 256 src/main/resources/application.yml | awk '{print $1}')
          echo "Validate required keys exist (no values printed)"
          grep -q '^spring:' src/main/resources/application.yml || (echo "Missing key: spring" && exit 1)
          grep -q 'datasource:' src/main/resources/application.yml || (echo "Missing key: datasource" && exit 1)
          grep -q 'jdbc:mysql://' src/main/resources/application.yml || (echo "Missing JDBC URL" && exit 1)
          grep -q '^redis:' src/main/resources/application.yml || (echo "Missing key: redis" && exit 1)

      - name: Debug - required secrets presence
        run: |
          echo "Secrets presence (values redacted):"
          [ -n "${{ secrets.NCP_ACCESS_KEY }}" ] && echo "NCP_ACCESS_KEY: set" || echo "NCP_ACCESS_KEY: MISSING"
          [ -n "${{ secrets.NCP_SECRET_KEY }}" ] && echo "NCP_SECRET_KEY: set" || echo "NCP_SECRET_KEY: MISSING"
          [ -n "${{ secrets.NCP_REGISTRY_URL }}" ] && echo "NCP_REGISTRY_URL: set" || echo "NCP_REGISTRY_URL: MISSING"
          [ -n "${{ secrets.NCP_SERVER_HOST }}" ] && echo "NCP_SERVER_HOST: set" || echo "NCP_SERVER_HOST: MISSING"
          [ -n "${{ secrets.NCP_SERVER_USER }}" ] && echo "NCP_SERVER_USER: set" || echo "NCP_SERVER_USER: MISSING"
          [ -n "${{ secrets.NCP_SERVER_PASSWORD }}" ] && echo "NCP_SERVER_PASSWORD: set" || echo "NCP_SERVER_PASSWORD: MISSING"
          [ -n "${{ secrets.APPLICATION_YML }}" ] && echo "APPLICATION_YML: set" || echo "APPLICATION_YML: MISSING"
      
      - name: Grant execute permission for gradlew
        run: chmod +x gradlew
      
      - name: Build with Gradle
        run: ./gradlew bootJar -x test

      - name: Debug - jar contains application.yml and checksum match
        run: |
          JAR=$(ls -1 build/libs/*-SNAPSHOT.jar | head -n1)
          echo "Using JAR: $JAR"
          jar tf "$JAR" | grep -q 'BOOT-INF/classes/application.yml' || (echo "application.yml missing in JAR" && exit 1)
          echo "JAR application.yml size:" $(unzip -p "$JAR" BOOT-INF/classes/application.yml | wc -c) "bytes"
          SRC_HASH=$(shasum -a 256 src/main/resources/application.yml | awk '{print $1}')
          JAR_HASH=$(unzip -p "$JAR" BOOT-INF/classes/application.yml | shasum -a 256 | awk '{print $1}')
          echo "SRC sha256: $SRC_HASH"
          echo "JAR sha256: $JAR_HASH"
          [ "$SRC_HASH" = "$JAR_HASH" ] || (echo "Checksum mismatch between source and JAR" && exit 1)
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Login to NCP Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ secrets.NCP_REGISTRY_URL }}
          username: ${{ secrets.NCP_ACCESS_KEY }}
          password: ${{ secrets.NCP_SECRET_KEY }}
      
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: |
            ${{ secrets.NCP_REGISTRY_URL }}/${{ env.IMAGE_NAME }}:latest
            ${{ secrets.NCP_REGISTRY_URL }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Deploy to NCP Server with docker-compose
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.NCP_SERVER_HOST }}
          username: ${{ secrets.NCP_SERVER_USER }}
          password: ${{ secrets.NCP_SERVER_PASSWORD }}
          script: |
            # Create and setup project directory
            sudo mkdir -p /home/ubuntu/studymate-server
            cd /home/ubuntu/studymate-server
            
            # Setup git repository if not exists
            if [ ! -d ".git" ]; then
              git init
              git remote add origin https://github.com/SWYP-STUDYMATE/STUDYMATE-SERVER.git
            fi
            
            # Install docker-compose plugin if not exists
            if ! docker-compose version >/dev/null 2>&1; then
              echo "Installing docker-compose plugin..."
              sudo apt-get update
              sudo apt-get install -y docker-compose-plugin
            fi
            
            # Docker login to NCP Registry
            echo "${{ secrets.NCP_SECRET_KEY }}" | docker login ${{ secrets.NCP_REGISTRY_URL }} -u ${{ secrets.NCP_ACCESS_KEY }} --password-stdin
            
            # Git pull latest changes (docker-compose files)
            git fetch origin main
            git reset --hard origin/main
            
            # Create application.yml from secrets
            echo "${{ secrets.APPLICATION_YML }}" > application.yml
            
            # Create .env file with Docker-specific settings
            cat > .env << EOF
            REGISTRY_URL=${{ secrets.NCP_REGISTRY_URL }}
            IMAGE_NAME=${{ env.IMAGE_NAME }}
            DB_ROOT_PASSWORD=${{ secrets.DB_ROOT_PASSWORD }}
            DB_USER=${{ secrets.DB_USER }}
            DB_PASSWORD=${{ secrets.DB_PASSWORD }}
            REDIS_PASSWORD=${{ secrets.REDIS_PASSWORD }}
            BACKUP_RETENTION_DAYS=7
            EOF
            
            # 데이터 디렉토리 생성 (현재 사용자 권한으로)
            mkdir -p ./data/{mysql,redis}
            mkdir -p ./logs ./uploads
            
            # Pull latest images
            docker-compose -f docker-compose.prod.yml pull
            
            # Stop existing services
            docker-compose -f docker-compose.prod.yml down
            
            # Start services with new configuration
            docker-compose -f docker-compose.prod.yml up -d
            
            # Wait for services to start
            echo "Waiting for services to start..."
            sleep 30
            
            # Check service status
            echo "=== docker-compose Status ==="
            docker-compose -f docker-compose.prod.yml ps
            
            echo "=== Application Logs (last 50 lines) ==="
            docker-compose -f docker-compose.prod.yml logs --tail 50 app
            
            echo "=== Health Check ==="
            # Wait for app to be fully ready
            for i in {1..12}; do
              if curl -f http://localhost:8080/api/v1/onboard/interest/motivations; then
                echo "Application is healthy!"
                break
              else
                echo "Attempt $i/12: Application not ready yet, waiting..."
                sleep 10
              fi
            done
            
            # Final status check
            if docker-compose -f docker-compose.prod.yml ps | grep -q "Up"; then
              echo "Deployment successful!"
            else
              echo "Deployment failed!"
              docker-compose -f docker-compose.prod.yml logs
              exit 1
            fi
            
            # Clean up old images
            docker image prune -af
