name: Deploy to NCP

on:
  push:
    branches:
      - main
  workflow_dispatch:

env:
  IMAGE_NAME: studymate-server

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'
      
      - name: Create application.properties (hardcoded for POC)
        run: |
          mkdir -p src/main/resources
          cat > src/main/resources/application.properties << 'EOF'
          server.port=8080
          
          spring.application.name=live
          spring.datasource.url=jdbc:mysql://db:3306/studymate?useSSL=false&serverTimezone=Asia/Seoul&characterEncoding=UTF-8&allowPublicKeyRetrieval=true&connectTimeout=60000&socketTimeout=60000&autoReconnect=true&maxReconnects=3&initialTimeout=10
          spring.datasource.username=studymate
          spring.datasource.password=studymate123!
          spring.datasource.hikari.connection-timeout=60000
          spring.datasource.hikari.validation-timeout=3000
          spring.datasource.hikari.leak-detection-threshold=60000
          spring.jpa.hibernate.ddl-auto=update
          spring.jpa.show-sql=true
          
          naver.client_id=EzXpYAkIVhX1ViFQ5edo
          naver.client_secret=Zml5tphcOJ
          naver.authorization_grant_type=authorization_code
          naver.redirect_uri=https://api.languagemate.kr/api/v1/login/oauth2/code/naver
          
          jwt.secret_key=c3R1ZHltYXRlc3R1ZHltYXRlc3R1ZHltYXRlc3R1ZHltYXRlc3R1ZHltYXRlc3R1ZHltYXRlc3R1ZHltYXRlc3R1ZHltYXRlc3R1ZHltYXRlc3R1ZHltYXRlc3R1ZHltYXRlc3R1ZHltYXRlc3R1ZHltYXRl
          
          redis.host=redis
          redis.port=6379
          redis.password=
          
          cloud.ncp.storage.region=kr-standard
          cloud.ncp.storage.endpoint=https://kr.object.ncloudstorage.com
          cloud.ncp.storage.access-key=ncp_iam_BPAMKR1FHfq8OtlptO2s
          cloud.ncp.storage.secret-key=ncp_iam_BPKMKRIVHA3Sg1Rd0nLEMJLBS3mLodofDT
          cloud.ncp.storage.bucket-name=languagemate-profile-img
          
          google.client_id=1068056726433-kf4s0t3jj6iis0aep2kvtgfcebfmfquj.apps.googleusercontent.com
          google.client_secret=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
          google.redirect_uri=https://api.languagemate.kr/api/v1/login/oauth2/code/google
          
          clova.studio.api-key=nv-4ca906c1bf814a59a0fd629d0beec6aaH11S
          clova.studio.endpoint=https://clovastudio.stream.ntruss.com/v1/chat-completions/HCX-003
          clova.studio.model=HCX-003
          clova.studio.max-tokens=1000
          
          management.endpoints.web.exposure.include=health,info
          management.endpoint.health.show-details=always
          
          workers.api.url=https://workers.languagemate.kr
          workers.api.key=
          
          features.enable-level-test=true
          features.enable-video-call=true
          features.enable-group-call=true
          features.enable-ai-feedback=true
          features.enable-mock-mode=false
          
          cors.allowed-origins=http://localhost:3000,http://localhost:5173,https://languagemate.kr
          cors.allowed-methods=GET,POST,PUT,DELETE,OPTIONS
          cors.allowed-headers=*
          cors.allow-credentials=true
          
          logging.level.com.studymate=DEBUG
          logging.level.org.springframework.security=DEBUG
          logging.level.org.springframework.boot=INFO
          logging.level.org.springframework.context=DEBUG
          EOF
      
      - name: Debug - print key config (redacted)
        run: |
          echo "===== application.properties (redacted) ====="
          sed -E \
            -e 's/(password=).*/\1*******/' \
            -e 's/(client_secret=).*/\1*******/' \
            -e 's/(secret_key=).*/\1*******/' \
            -e 's/(access-key=).*/\1*******/' \
            -e 's/(secret-key=).*/\1*******/' \
            src/main/resources/application.properties | sed -n '1,200p'
          echo "===== end ====="

      - name: Debug - validate application.properties and compute checksum
        run: |
          echo "application.properties size:" $(wc -c < src/main/resources/application.properties) "bytes"
          echo "application.properties sha256:" $(shasum -a 256 src/main/resources/application.properties | awk '{print $1}')
          echo "Validate required keys exist (no values printed)"
          grep -q '^spring.application.name=' src/main/resources/application.properties || (echo "Missing key: spring.application.name" && exit 1)
          grep -q '^spring.datasource.url=' src/main/resources/application.properties || (echo "Missing key: spring.datasource.url" && exit 1)
          grep -q 'jdbc:mysql://' src/main/resources/application.properties || (echo "Missing JDBC URL" && exit 1)
          grep -q '^redis.host=' src/main/resources/application.properties || (echo "Missing key: redis.host" && exit 1)
          grep -q '^clova.studio.api-key=' src/main/resources/application.properties || (echo "Missing key: clova.studio.api-key" && exit 1)

      - name: Debug - required secrets presence
        run: |
          echo "Secrets presence (values redacted):"
          [ -n "${{ secrets.NCP_ACCESS_KEY }}" ] && echo "NCP_ACCESS_KEY: set" || echo "NCP_ACCESS_KEY: MISSING"
          [ -n "${{ secrets.NCP_SECRET_KEY }}" ] && echo "NCP_SECRET_KEY: set" || echo "NCP_SECRET_KEY: MISSING"
          [ -n "${{ secrets.NCP_REGISTRY_URL }}" ] && echo "NCP_REGISTRY_URL: set" || echo "NCP_REGISTRY_URL: MISSING"
          [ -n "${{ secrets.NCP_SERVER_HOST }}" ] && echo "NCP_SERVER_HOST: set" || echo "NCP_SERVER_HOST: MISSING"
          [ -n "${{ secrets.NCP_SERVER_USER }}" ] && echo "NCP_SERVER_USER: set" || echo "NCP_SERVER_USER: MISSING"
          [ -n "${{ secrets.NCP_SERVER_PASSWORD }}" ] && echo "NCP_SERVER_PASSWORD: set" || echo "NCP_SERVER_PASSWORD: MISSING"
          echo "APPLICATION_YML: DEPRECATED (using hardcoded properties now)"
      
      - name: Grant execute permission for gradlew
        run: chmod +x gradlew
      
      - name: Build with Gradle
        run: ./gradlew bootJar -x test

      - name: Debug - jar contains application.properties and checksum match
        run: |
          JAR=$(ls -1 build/libs/*-SNAPSHOT.jar | head -n1)
          echo "Using JAR: $JAR"
          jar tf "$JAR" | grep -q 'BOOT-INF/classes/application.properties' || (echo "application.properties missing in JAR" && exit 1)
          echo "JAR application.properties size:" $(unzip -p "$JAR" BOOT-INF/classes/application.properties | wc -c) "bytes"
          SRC_HASH=$(shasum -a 256 src/main/resources/application.properties | awk '{print $1}')
          JAR_HASH=$(unzip -p "$JAR" BOOT-INF/classes/application.properties | shasum -a 256 | awk '{print $1}')
          echo "SRC sha256: $SRC_HASH"
          echo "JAR sha256: $JAR_HASH"
          [ "$SRC_HASH" = "$JAR_HASH" ] || (echo "Checksum mismatch between source and JAR" && exit 1)
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Login to NCP Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ secrets.NCP_REGISTRY_URL }}
          username: ${{ secrets.NCP_ACCESS_KEY }}
          password: ${{ secrets.NCP_SECRET_KEY }}
      
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: |
            ${{ secrets.NCP_REGISTRY_URL }}/${{ env.IMAGE_NAME }}:latest
            ${{ secrets.NCP_REGISTRY_URL }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Deploy to NCP Server with docker-compose
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.NCP_SERVER_HOST }}
          username: ${{ secrets.NCP_SERVER_USER }}
          password: ${{ secrets.NCP_SERVER_PASSWORD }}
          script: |
            # Create and setup project directory
            sudo mkdir -p /home/ubuntu/studymate-server
            cd /home/ubuntu/studymate-server
            
            # Setup git repository if not exists
            if [ ! -d ".git" ]; then
              git init
              git remote add origin https://github.com/SWYP-STUDYMATE/STUDYMATE-SERVER.git
            fi
            
            # Install docker-compose plugin if not exists
            if ! docker-compose version >/dev/null 2>&1; then
              echo "Installing docker-compose plugin..."
              sudo apt-get update
              sudo apt-get install -y docker-compose-plugin
            fi
            
            # Docker login to NCP Registry
            echo "${{ secrets.NCP_SECRET_KEY }}" | docker login ${{ secrets.NCP_REGISTRY_URL }} -u ${{ secrets.NCP_ACCESS_KEY }} --password-stdin
            
            # Git pull latest changes (docker-compose files)
            git fetch origin main
            git reset --hard origin/main
            
            # Configuration is already embedded in JAR - no need to create application.properties here
            echo "Application configuration is embedded in the JAR file"
            
            # Create minimal .env file with only registry info (모든 설정은 docker-compose에 하드코딩됨)
            cat > .env << EOF
            REGISTRY_URL=${{ secrets.NCP_REGISTRY_URL }}
            IMAGE_NAME=${{ env.IMAGE_NAME }}
            EOF
            
            # 로그 및 업로드 디렉토리 생성
            mkdir -p ./logs ./uploads
            
            # Pull latest images
            docker-compose -f docker-compose.prod.yml pull
            
            # Stop existing services and clean up conflicting resources
            docker-compose -f docker-compose.prod.yml down
            
            # Remove orphaned containers if they exist
            docker-compose -f docker-compose.prod.yml down --remove-orphans
            
            # Remove conflicting volumes (from bind mounts to named volumes migration)
            echo "Cleaning up conflicting volumes..."
            docker volume rm studymate-server_mysql-data 2>/dev/null || echo "mysql-data volume didn't exist or couldn't be removed"
            docker volume rm studymate-server_redis-data 2>/dev/null || echo "redis-data volume didn't exist or couldn't be removed"
            
            # Clean up networks to avoid conflicts
            echo "Cleaning up old networks..."
            docker network rm studymate-network 2>/dev/null || echo "studymate-network didn't exist"
            docker network rm studymate-server_default 2>/dev/null || echo "studymate-server_default didn't exist"
            
            # Start all services with restart policy
            echo "Starting all services..."
            docker-compose -f docker-compose.prod.yml up -d
            
            # Wait for services to be healthy (healthcheck-based)
            echo "Waiting for services to become healthy..."
            
            # Wait for MySQL to be healthy
            for i in {1..60}; do
              if docker-compose -f docker-compose.prod.yml ps db | grep "healthy"; then
                echo "✅ MySQL is healthy"
                break
              else
                echo "Waiting for MySQL to be healthy... ($i/60)"
                sleep 5
              fi
            done
            
            # Wait for Redis to be healthy
            for i in {1..30}; do
              if docker-compose -f docker-compose.prod.yml ps redis | grep "healthy"; then
                echo "✅ Redis is healthy" 
                break
              else
                echo "Waiting for Redis to be healthy... ($i/30)"
                sleep 3
              fi
            done
            
            # Additional wait for app startup after dependencies are healthy
            echo "Dependencies are healthy. Waiting additional time for app startup..."
            sleep 30
            
            # Check service status  
            echo "=== docker-compose Status ==="
            docker-compose -f docker-compose.prod.yml ps
            
            echo "=== Container Inspection ==="
            docker-compose -f docker-compose.prod.yml exec -T app ps aux || echo "Could not inspect app container processes"
            
            echo "=== Database Logs (last 30 lines) ==="
            docker-compose -f docker-compose.prod.yml logs --tail 30 db
            
            echo "=== Redis Logs (last 20 lines) ==="
            docker-compose -f docker-compose.prod.yml logs --tail 20 redis
            
            echo "=== Application Logs (last 100 lines) ==="
            docker-compose -f docker-compose.prod.yml logs --tail 100 app
            
            echo "=== Network Test ==="
            docker-compose -f docker-compose.prod.yml exec -T app ip addr show || echo "Could not show network info"
            docker-compose -f docker-compose.prod.yml exec -T app netstat -tlnp 2>/dev/null | grep 8080 || echo "Port 8080 not found in netstat"
            
            echo "=== Health Check ==="
            # Wait for app to be fully ready
            for i in {1..12}; do
              echo "Attempt $i/12: Testing application health..."
              
              # First check if container is still running
              if ! docker-compose -f docker-compose.prod.yml ps app | grep -q "Up"; then
                echo "ERROR: App container is not running!"
                docker-compose -f docker-compose.prod.yml logs --tail 50 app
                break
              fi
              
              # Check if port 8080 is listening inside container
              if docker-compose -f docker-compose.prod.yml exec -T app nc -z localhost 8080 2>/dev/null; then
                echo "Port 8080 is listening inside container"
                if curl -f http://localhost:8080/api/v1/onboard/interest/motivations; then
                  echo "Application is healthy!"
                  break
                else
                  echo "Port is listening but API endpoint failed"
                fi
              else
                echo "Port 8080 not listening inside container"
              fi
              
              if [ $i -eq 12 ]; then
                echo "Final attempt failed. Showing detailed logs..."
                echo "=== FULL Application Logs ==="
                docker-compose -f docker-compose.prod.yml logs app
                echo "=== Container Stats ==="
                docker-compose -f docker-compose.prod.yml exec -T app df -h || echo "Could not get disk usage"
                docker-compose -f docker-compose.prod.yml exec -T app free -m || echo "Could not get memory usage"
              else
                sleep 10
              fi
            done
            
            # Final status check with detailed logging
            if docker-compose -f docker-compose.prod.yml ps | grep -q "Up"; then
              echo "=== Final Deployment Status Check ==="
              RUNNING_SERVICES=$(docker-compose -f docker-compose.prod.yml ps --services --filter "status=running")
              echo "Running services: $RUNNING_SERVICES"
              
              if echo "$RUNNING_SERVICES" | grep -q "app"; then
                echo "App service is running - checking health endpoint one more time..."
                if curl -f http://localhost:8080/actuator/health 2>/dev/null; then
                  echo "✅ Deployment successful - Health endpoint accessible!"
                elif curl -f http://localhost:8080 2>/dev/null; then
                  echo "✅ Deployment successful - Root endpoint accessible!"
                else
                  echo "⚠️  Deployment completed but health check failed"
                fi
              else
                echo "❌ App service is not running"
                exit 1
              fi
            else
              echo "❌ Deployment failed - no services running!"
              echo "=== All Service Logs ==="
              docker-compose -f docker-compose.prod.yml logs
              exit 1
            fi
            
            # Clean up old images
            docker image prune -af
