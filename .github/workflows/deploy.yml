name: Deploy to NCP

on:
  push:
    branches:
      - main
  workflow_dispatch:

env:
  IMAGE_NAME: studymate-server

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'
      
      - name: Create application.yml
        run: |
          mkdir -p src/main/resources
          echo "${{ secrets.APPLICATION_YML }}" > src/main/resources/application.yml
      
      - name: Grant execute permission for gradlew
        run: chmod +x gradlew
      
      - name: Build with Gradle
        run: ./gradlew bootJar -x test
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Login to NCP Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ secrets.NCP_REGISTRY_URL }}
          username: ${{ secrets.NCP_ACCESS_KEY }}
          password: ${{ secrets.NCP_SECRET_KEY }}
      
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: |
            ${{ secrets.NCP_REGISTRY_URL }}/${{ secrets.NCP_REGISTRY_NAMESPACE }}/${{ env.IMAGE_NAME }}:latest
            ${{ secrets.NCP_REGISTRY_URL }}/${{ secrets.NCP_REGISTRY_NAMESPACE }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Deploy to NCP Server
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.NCP_SERVER_HOST }}
          username: ${{ secrets.NCP_SERVER_USER }}
          key: ${{ secrets.NCP_SERVER_SSH_KEY }}
          script: |
            # Docker login to NCP Registry
            echo "${{ secrets.NCP_SECRET_KEY }}" | docker login ${{ secrets.NCP_REGISTRY_URL }} -u ${{ secrets.NCP_ACCESS_KEY }} --password-stdin
            
            # Pull the latest image
            docker pull ${{ secrets.NCP_REGISTRY_URL }}/${{ secrets.NCP_REGISTRY_NAMESPACE }}/${{ env.IMAGE_NAME }}:latest
            
            # Stop and remove existing container
            docker stop studymate-server || true
            docker rm studymate-server || true
            
            # Run new container
            docker run -d \
              --name studymate-server \
              --restart always \
              -p 8080:8080 \
              ${{ secrets.NCP_REGISTRY_URL }}/${{ secrets.NCP_REGISTRY_NAMESPACE }}/${{ env.IMAGE_NAME }}:latest
            
            # Wait for container to start
            sleep 10
            
            # Check container status
            if docker ps | grep studymate-server; then
              echo "Container is running successfully!"
              docker logs --tail 50 studymate-server
            else
              echo "Container failed to start!"
              docker logs studymate-server
              exit 1
            fi
            
            # Clean up old images
            docker image prune -af
