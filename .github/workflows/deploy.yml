name: Deploy to NCP

on:
  push:
    branches:
      - main
  workflow_dispatch:

env:
  IMAGE_NAME: studymate-server

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'
      
      - name: Create application.yml
        run: |
          mkdir -p src/main/resources
          echo "${{ secrets.APPLICATION_YML }}" > src/main/resources/application.yml
      
      - name: Debug - print key config (redacted)
        run: |
          echo "===== application.yml (redacted) ====="
          sed -E \
            -e 's/(password:).*/\1 *******/' \
            -e 's/(client_secret:).*/\1 *******/' \
            -e 's/(secret_key:).*/\1 *******/' \
            -e 's/(access-key:).*/\1 *******/' \
            -e 's/(secret-key:).*/\1 *******/' \
            src/main/resources/application.yml | sed -n '1,200p'
          echo "===== end ====="

      - name: Debug - validate application.yml and compute checksum
        run: |
          echo "application.yml size:" $(wc -c < src/main/resources/application.yml) "bytes"
          echo "application.yml sha256:" $(shasum -a 256 src/main/resources/application.yml | awk '{print $1}')
          echo "Validate required keys exist (no values printed)"
          grep -q '^spring:' src/main/resources/application.yml || (echo "Missing key: spring" && exit 1)
          grep -q 'datasource:' src/main/resources/application.yml || (echo "Missing key: datasource" && exit 1)
          grep -q 'jdbc:mysql://' src/main/resources/application.yml || (echo "Missing JDBC URL" && exit 1)
          grep -q '^redis:' src/main/resources/application.yml || (echo "Missing key: redis" && exit 1)

      - name: Debug - required secrets presence
        run: |
          echo "Secrets presence (values redacted):"
          [ -n "${{ secrets.NCP_ACCESS_KEY }}" ] && echo "NCP_ACCESS_KEY: set" || echo "NCP_ACCESS_KEY: MISSING"
          [ -n "${{ secrets.NCP_SECRET_KEY }}" ] && echo "NCP_SECRET_KEY: set" || echo "NCP_SECRET_KEY: MISSING"
          [ -n "${{ secrets.NCP_REGISTRY_URL }}" ] && echo "NCP_REGISTRY_URL: set" || echo "NCP_REGISTRY_URL: MISSING"
          [ -n "${{ secrets.NCP_SERVER_HOST }}" ] && echo "NCP_SERVER_HOST: set" || echo "NCP_SERVER_HOST: MISSING"
          [ -n "${{ secrets.NCP_SERVER_USER }}" ] && echo "NCP_SERVER_USER: set" || echo "NCP_SERVER_USER: MISSING"
          [ -n "${{ secrets.NCP_SERVER_PASSWORD }}" ] && echo "NCP_SERVER_PASSWORD: set" || echo "NCP_SERVER_PASSWORD: MISSING"
          [ -n "${{ secrets.APPLICATION_YML }}" ] && echo "APPLICATION_YML: set" || echo "APPLICATION_YML: MISSING"
      
      - name: Grant execute permission for gradlew
        run: chmod +x gradlew
      
      - name: Build with Gradle
        run: ./gradlew bootJar -x test

      - name: Debug - jar contains application.yml and checksum match
        run: |
          JAR=$(ls -1 build/libs/*-SNAPSHOT.jar | head -n1)
          echo "Using JAR: $JAR"
          jar tf "$JAR" | grep -q 'BOOT-INF/classes/application.yml' || (echo "application.yml missing in JAR" && exit 1)
          echo "JAR application.yml size:" $(unzip -p "$JAR" BOOT-INF/classes/application.yml | wc -c) "bytes"
          SRC_HASH=$(shasum -a 256 src/main/resources/application.yml | awk '{print $1}')
          JAR_HASH=$(unzip -p "$JAR" BOOT-INF/classes/application.yml | shasum -a 256 | awk '{print $1}')
          echo "SRC sha256: $SRC_HASH"
          echo "JAR sha256: $JAR_HASH"
          [ "$SRC_HASH" = "$JAR_HASH" ] || (echo "Checksum mismatch between source and JAR" && exit 1)
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Login to NCP Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ secrets.NCP_REGISTRY_URL }}
          username: ${{ secrets.NCP_ACCESS_KEY }}
          password: ${{ secrets.NCP_SECRET_KEY }}
      
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: |
            ${{ secrets.NCP_REGISTRY_URL }}/${{ env.IMAGE_NAME }}:latest
            ${{ secrets.NCP_REGISTRY_URL }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Deploy to NCP Server
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.NCP_SERVER_HOST }}
          username: ${{ secrets.NCP_SERVER_USER }}
          password: ${{ secrets.NCP_SERVER_PASSWORD }}
          script: |
            # Docker login to NCP Registry
            echo "${{ secrets.NCP_SECRET_KEY }}" | docker login ${{ secrets.NCP_REGISTRY_URL }} -u ${{ secrets.NCP_ACCESS_KEY }} --password-stdin
            
            # Pull the latest image
            docker pull ${{ secrets.NCP_REGISTRY_URL }}/${{ env.IMAGE_NAME }}:latest
            
            # Stop and remove existing container
            docker stop studymate-server || true
            docker rm studymate-server || true
            
            # Run new container
            docker run -d \
              --name studymate-server \
              --restart always \
              -p 8080:8080 \
              ${{ secrets.NCP_REGISTRY_URL }}/${{ env.IMAGE_NAME }}:latest
            
            # Wait for container to start
            sleep 10
            
            # Check container status
            if docker ps | grep studymate-server; then
              echo "Container is running successfully!"
              docker logs --tail 50 studymate-server
            else
              echo "Container failed to start!"
              docker logs studymate-server
              exit 1
            fi
            
            # Clean up old images
            docker image prune -af
