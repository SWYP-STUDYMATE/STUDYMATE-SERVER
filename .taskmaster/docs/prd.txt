# STUDYMATE 시스템 정합성 수정 프로젝트

## 프로젝트 개요
STUDYMATE 언어 교환 플랫폼의 전체 시스템 간 정합성 문제를 해결하여 안정적이고 일관된 서비스를 제공하는 것이 목표입니다.

## 현재 문제 상황
시스템 전체 정합성 분석 결과 다음과 같은 심각한 불일치 문제들이 발견되었습니다:
- 데이터베이스 스키마 문서와 실제 엔티티 간 30% 정합성 (심각한 수준)
- 클라이언트-서버 API 엔드포인트 불일치 
- ID 타입 불일치 (UUID vs Long)
- 테이블명/컬럼명 케이스 불일치
- WebSocket 통신 구현 불일치

## 해결해야 할 핵심 문제들

### 1. 데이터베이스 스키마 정합성 수정 (Priority 1 - 긴급)
**문제**: 스키마 문서와 실제 JPA 엔티티 간 심각한 불일치
**영향**: 개발자 혼란, 잘못된 구현, 데이터 무결성 위험

**구체적 문제들**:
- USERS 테이블: 스키마에는 email 필드(UK)가 있으나 실제 엔티티에는 없음
- LOCATION 테이블: 스키마(name, code) vs 실제(country, city, timeZone) 완전 다름
- CHAT_ROOM: 스키마(UUID) vs 실제(Long) ID 타입 불일치  
- CHAT_MESSAGE: 스키마(UUID) vs 실제(Long) ID 타입 불일치
- SESSION: 스키마(SESSIONS) vs 실제(sessions) 테이블명 케이스 불일치
- LEVEL_TEST: 스키마(LEVEL_TESTS) vs 실제(level_tests) 테이블명 케이스 불일치

### 2. API 엔드포인트 일치성 확보 (Priority 1 - 긴급)
**문제**: 클라이언트가 호출하는 API와 서버가 제공하는 API 불일치
**영향**: 404 에러, 기능 동작 실패

**구체적 문제들**:
- 클라이언트: `/user/profile` 호출 → 서버: 해당 엔드포인트 없음
- 클라이언트: 다양한 사용자 정보 API → 서버: 일부 누락
- API 응답 형식 불일치 가능성

### 3. ID 타입 전략 통일 (Priority 2 - 중요)
**문제**: UUID vs Long ID 혼재 사용으로 일관성 부족
**영향**: 개발 복잡성 증가, 성능 이슈 가능성

**결정 필요사항**:
- 전체 시스템 ID 전략 결정 (UUID 또는 Long)
- 기존 데이터 마이그레이션 방안
- 성능 vs 보안성 trade-off 고려

### 4. WebSocket 통신 검증 및 통합 (Priority 2 - 중요)  
**문제**: 클라이언트-서버-Workers 간 실시간 통신 구현 불일치
**영향**: 실시간 채팅, WebRTC 기능 불안정

**확인 필요사항**:
- Spring Boot WebSocket 구현 완료 여부
- STOMP 프로토콜 구현 일치성
- Workers WebRTC와 메인 서버 채팅 연동

### 5. Workers 시스템 통합 최적화 (Priority 2 - 중요)
**문제**: Cloudflare Workers와 메인 서버 간 데이터 동기화 부족
**영향**: 사용자 경험 불일치, 데이터 중복/누락

**Workers 현재 구성 (wrangler.toml 기반)**:
- AI 바인딩: LLM, Whisper, 임베딩
- Durable Objects: WebRTC 룸 관리
- R2 Storage: 파일 저장 (dev/prod 분리)
- KV Cache: 세션/캐시 데이터
- Analytics Engine: 사용량 추적

### 6. 문서화 자동화 시스템 구축 (Priority 3 - 개선)
**문제**: 스키마 변경 시 문서 업데이트가 수동으로 이루어짐
**영향**: 지속적인 불일치 발생, 개발 효율성 저하

## 성공 기준

### 기술적 성공 지표
- [ ] 스키마-엔티티 정합성 95% 이상
- [ ] API 엔드포인트 일치율 100%
- [ ] ID 타입 전체 시스템 통일
- [ ] 실시간 기능 완전 동작
- [ ] 문서 자동 업데이트 시스템 구축

### 비즈니스 성공 지표
- [ ] 개발자 온보딩 시간 50% 단축
- [ ] 버그 발생률 70% 감소
- [ ] 시스템 안정성 99.9% 달성
- [ ] 코드 리뷰 시간 40% 단축

## 제약사항
- 운영 중인 서비스 무중단 배포 필요
- 기존 사용자 데이터 보존 필수
- NCP 인프라 환경 유지
- 개발 리소스 최소화

## 우선순위
1. **Priority 1 (긴급)**: 데이터베이스 스키마 수정, API 엔드포인트 일치
2. **Priority 2 (중요)**: ID 타입 통일, WebSocket 검증, Workers 통합  
3. **Priority 3 (개선)**: 문서화 자동화, 성능 최적화

## 리스크 분석
- **높음**: 스키마 변경 중 데이터 손실 위험
- **중간**: API 변경 중 클라이언트 호환성 문제
- **낮음**: 문서화 작업 지연

## 예상 일정
- **1-2주**: Priority 1 문제 해결
- **3-4주**: Priority 2 문제 해결  
- **5-6주**: Priority 3 개선사항 적용
- **7-8주**: 통합 테스트 및 검증

## 기대 효과
이 프로젝트 완료 후 STUDYMATE 시스템은:
- 높은 일관성과 안정성을 가진 견고한 플랫폼 구축
- 개발 생산성 대폭 향상
- 사용자 경험 품질 개선
- 향후 확장성과 유지보수성 확보

이 프로젝트는 STUDYMATE가 글로벌 언어 교환 플랫폼으로 성장하기 위한 필수적인 기술 기반을 마련하는 전략적 투자입니다.