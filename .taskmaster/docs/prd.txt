# STUDYMATE 언어교환 플랫폼 PRD (Product Requirements Document)

## 1. 프로젝트 개요

### 프로젝트명
STUDYMATE - AI 기반 실시간 언어교환 플랫폼

### 비전
AI 기반 실시간 언어교환 플랫폼을 통해 전 세계 사람들의 언어 학습을 혁신한다.

### 목표
- 개인화된 학습 경험 제공 (AI 기반 레벨 테스트)
- 실시간 상호작용 (WebRTC 기반 고품질 화상/음성 통화)
- 효과적인 매칭 (사용자 선호도 기반 최적의 언어교환 파트너 연결)
- 지속적인 학습 관리 (진도 추적 및 성취도 분석)

## 2. 기술 스택

### Backend
- Spring Boot 3.5.3 + Java 17
- MySQL 8.0 + Redis 7
- JWT + Spring Security + OAuth (Naver, Google)
- WebSocket (STOMP) + WebRTC
- Clova Studio API (AI 레벨 테스트)
- NCP Object Storage + Docker

### Frontend
- React 19 + TypeScript + Vite
- Zustand (상태 관리)
- Tailwind CSS
- Cloudflare Pages

### Infrastructure
- NCP Server + Load Balancer
- Docker + Docker Compose
- GitHub Actions (CI/CD)

## 3. 핵심 기능 요구사항

### 3.1 사용자 관리 시스템
- OAuth 인증 (Naver, Google)
- JWT 토큰 기반 인증/인가
- 사용자 프로필 관리 (영어명, 자기소개, 위치, 프로필 이미지)
- 계정 설정 및 탈퇴 기능

### 3.2 온보딩 시스템
- 언어 설정 (학습 언어, 수준, 모국어)
- 학습 스타일 설정 (동기, 학습 방법, 소통 선호도)
- 파트너 선호도 설정 (성별, 나이대, 성격 유형)
- 스케줄 관리 (요일별 학습 시간)

### 3.3 AI 레벨 테스트
- Clova Studio API 연동 음성 기반 테스트
- CEFR 기준 레벨 진단 (A1-C2)
- 발음, 문법, 어휘, 유창성 세부 분석
- 개인화된 피드백 및 학습 추천

### 3.4 실시간 채팅 시스템
- WebSocket 기반 실시간 메시지
- 1:1 및 그룹 채팅방 지원
- 텍스트, 이미지, 파일 전송
- 읽음 표시 및 온라인 상태

### 3.5 화상/음성 통화
- WebRTC P2P 통신
- 고품질 화상/음성 통화
- 화면 공유 기능
- 통화 녹음 및 품질 모니터링

### 3.6 매칭 시스템
- AI 기반 스마트 매칭 알고리즘
- 언어 수준 호환성 분석
- 학습 목표 및 스케줄 매칭
- 사용자 피드백 기반 개선

### 3.7 학습 관리 시스템
- 학습 통계 및 진도 추적
- 성취 시스템 (배지, 레벨업)
- 학습 목표 설정 및 관리
- 개인화된 학습 추천

### 3.8 분석 및 대시보드
- 사용자 활동 분석
- 학습 패턴 분석
- 성과 지표 추적
- 관리자 대시보드

## 4. 데이터베이스 설계

### 주요 엔티티
- Users (사용자 정보)
- Locations (위치 정보)
- Languages & LanguageLevels (언어 및 레벨)
- OnboardingData (온보딩 설문 결과)
- ChatRooms & ChatMessages (채팅 시스템)
- Sessions & SessionParticipants (화상/음성 세션)
- LevelTests (AI 레벨 테스트 결과)
- MatchingHistory (매칭 히스토리)
- Analytics (분석 데이터)
- Achievements (성취 시스템)

### 관계 설계
- 사용자 중심의 정규화된 관계형 설계
- 복합키 활용한 매핑 테이블
- 인덱스 최적화된 쿼리 성능

## 5. API 설계

### 인증 API
- OAuth 로그인/콜백 처리
- JWT 토큰 발급/갱신
- 사용자 인증/인가

### 사용자 관리 API
- 프로필 조회/수정
- 위치 및 언어 설정
- 파일 업로드 (프로필 이미지)

### 온보딩 API
- 설문 단계별 저장
- 온보딩 완료 처리
- 사용자 선호도 관리

### 채팅 API
- 채팅방 생성/조회
- 메시지 전송/조회
- 파일 업로드/다운로드
- 읽음 상태 관리

### 화상통화 API
- WebRTC 룸 생성/참여
- 시그널링 서버 연동
- 참가자 상태 관리

### 매칭 API
- 파트너 검색/매칭
- 매칭 요청/응답
- 매칭 히스토리

### 레벨테스트 API
- 테스트 시작/제출
- 음성 분석 처리
- 결과 조회/피드백

### 분석 API
- 개인 학습 통계
- 시스템 전체 분석
- 활동 기록

## 6. 인프라 요구사항

### NCP 클라우드 아키텍처
- VPC 네트워크 구성
- Load Balancer + Auto Scaling
- MySQL/Redis 관리형 서비스
- Object Storage + CDN
- SSL/TLS 인증서

### 개발 환경
- Docker 기반 로컬 개발환경
- GitHub Actions CI/CD
- 환경별 설정 관리 (.env)

## 7. 보안 요구사항

### 인증/인가
- JWT 기반 stateless 인증
- OAuth 2.0 표준 준수
- 토큰 만료 및 갱신 관리

### 데이터 보호
- 개인정보 암호화 저장
- HTTPS 통신 강제
- SQL Injection 방지
- CORS 정책 적용

### API 보안
- 레이트 리미팅
- 요청 검증 및 필터링
- 에러 메시지 최소화

## 8. 성능 요구사항

### 응답 시간
- API 응답: 평균 200ms 이하
- 채팅 메시지: 100ms 이하
- 매칭 처리: 5초 이하

### 처리량
- 동시 사용자: 1,000명
- 메시지 처리: 10,000건/분
- API 호출: 100,000건/시간

### 가용성
- 서비스 가동률: 99.5%
- 최대 다운타임: 4시간/월

## 9. 품질 보증

### 테스트 전략
- 단위 테스트: 80% 이상 커버리지
- 통합 테스트: 주요 API 시나리오
- E2E 테스트: 핵심 사용자 플로우

### 코드 품질
- SonarQube 정적 분석
- ESLint + Prettier 코드 스타일
- 코드 리뷰 필수

## 10. 운영 및 모니터링

### 로깅
- 구조화된 로깅 (JSON 포맷)
- 에러 추적 및 알림
- 사용자 활동 로그

### 모니터링
- 시스템 메트릭 수집
- APM 도구 연동
- 실시간 알림 시스템

## 11. 확장성 고려사항

### 수직적 확장
- CPU/Memory 자동 스케일링
- 데이터베이스 성능 최적화
- 캐시 전략 고도화

### 수평적 확장  
- 마이크로서비스 아키텍처 전환
- 데이터베이스 샤딩
- CDN 및 캐시 레이어 확장

## 12. 성공 지표 (KPI)

### 비즈니스 지표
- 월간 활성 사용자: 10,000명 (1년 목표)
- 평균 세션 시간: 30분 이상
- 사용자 리텐션율: 60% (30일 기준)
- 레벨 테스트 정확도: 95% 이상

### 기술 지표
- API 응답 시간: 평균 200ms
- 시스템 가용성: 99.5%
- 버그 발생률: Critical 0건/월
- 배포 빈도: 주 2회 이상

## 13. 위험 관리

### 기술적 위험
- WebRTC 연결 불안정 → TURN 서버 도입
- AI API 의존도 → 다중 서비스 연동
- 서버 확장성 → Load Balancer, 마이크로서비스

### 비즈니스 위험
- 사용자 확보 어려움 → 마케팅 강화
- 경쟁사 모방 → 기술적 차별화
- 수익화 지연 → 단계적 수익 모델

## 14. 단계별 개발 계획

### Phase 1: MVP (완료)
- 기본 인증 시스템
- 사용자 온보딩
- 기본 채팅 기능
- Docker 배포

### Phase 2: 핵심 기능 (진행 중)  
- AI 레벨 테스트
- WebRTC 통화
- 매칭 알고리즘
- 학습 통계

### Phase 3: 고도화 (계획)
- 모바일 앱
- 다국어 지원  
- AI 추천 시스템
- 소셜 기능

### Phase 4: 확장 (향후)
- Enterprise 솔루션
- 교육 기관 연동
- 글로벌 서비스
- 오프라인 연계