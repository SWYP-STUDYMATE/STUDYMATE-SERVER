plugins {
	id 'java'
	id 'org.springframework.boot' version '3.5.3'
	id 'io.spring.dependency-management' version '1.1.7'
	id 'org.openapi.generator' version '7.10.0'
}

group = 'com.studymate'
version = '0.0.1-SNAPSHOT'

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(21)
	}
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-web'

	implementation 'org.springframework.boot:spring-boot-starter-security'

	implementation 'org.springframework.boot:spring-boot-starter-websocket'

	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-actuator'
	implementation 'org.springframework.cloud:spring-cloud-starter-openfeign'
	implementation 'org.springframework.boot:spring-boot-starter-data-redis'

	// QueryDSL
	implementation 'com.querydsl:querydsl-jpa:5.0.0:jakarta'
	annotationProcessor 'com.querydsl:querydsl-apt:5.0.0:jakarta'
	annotationProcessor 'jakarta.annotation:jakarta.annotation-api'
	annotationProcessor 'jakarta.persistence:jakarta.persistence-api'



	implementation 'com.amazonaws:aws-java-sdk-s3:1.12.743'

	implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.8.9'

	//db
	runtimeOnly 'mysql:mysql-connector-java:8.0.33'
	runtimeOnly 'com.h2database:h2'
	//jwt 0.11 ver library 추가
	implementation 'io.jsonwebtoken:jjwt-api:0.11.5'
	runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.11.5'
	//토큰 파싱을 위한 의존성 추가
	runtimeOnly 'io.jsonwebtoken:jjwt-jackson:0.11.5'

	compileOnly 'org.projectlombok:lombok'
	annotationProcessor 'org.projectlombok:lombok'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.springframework.security:spring-security-test'
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
	//
	implementation 'org.springframework.boot:spring-boot-starter-webflux'
	implementation 'org.springframework.boot:spring-boot-starter-oauth2-client'
}
dependencyManagement {
	imports {
		mavenBom "org.springframework.cloud:spring-cloud-dependencies:2025.0.0"

	}
}

tasks.named('test') {
	useJUnitPlatform()
}

// OpenAPI Generator configuration for TypeScript client generation
openApiGenerate {
	generatorName = "typescript-fetch"
	inputSpec = "$rootDir/build/openapi.json"
	outputDir = "$rootDir/generated/typescript-client"
	apiPackage = "com.studymate.api"
	modelPackage = "com.studymate.models"
	configOptions = [
		"npmName": "studymate-api-client",
		"npmVersion": "1.0.0",
		"supportsES6": "true",
		"withInterfaces": "true",
		"typescriptThreePlus": "true"
	]
	globalProperties = [
		"models": "",
		"apis": ""
	]
}

// Task to extract OpenAPI spec as JSON before generating client
task extractOpenApiSpec {
	group = 'openapi'
	description = 'Extract OpenAPI specification as JSON file'
	doLast {
		mkdir "build"
		exec {
			commandLine 'curl', '-o', 'build/openapi.json', 'http://localhost:8080/v3/api-docs'
		}
	}
}

// Task to generate and copy TypeScript types to client project
task generateTypescriptClient {
	group = 'openapi'
	description = 'Generate TypeScript client and copy to client project'
	dependsOn extractOpenApiSpec, openApiGenerate
	doLast {
		def clientProjectPath = "../STUDYMATE-CLIENT"
		if (file(clientProjectPath).exists()) {
			copy {
				from "$rootDir/generated/typescript-client/src"
				into "$clientProjectPath/src/types/api-generated"
				include "**/*.ts"
			}
			println "TypeScript client generated and copied to $clientProjectPath/src/types/api-generated"
		} else {
			println "Client project not found at $clientProjectPath"
		}
	}
}
